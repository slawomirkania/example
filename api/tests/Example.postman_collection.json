{
	"info": {
		"name": "Example",
		"_postman_id": "0e55a3c6-bb36-2e16-6f68-bb225210f82d",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. /accounts - validation - empty usernam",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Error when empty username\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.eql('username: Please provide username');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}/accounts",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "2. /accounts - pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Correct amount of page items\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.itemsPerPage).to.eql(10);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/hal+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}/accounts",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "3. /accounts - pagination - change page items amount by client",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Control items per page from client Point Of View\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.itemsPerPage).to.eql(5);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/hal+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}/accounts?page=1&itemsPerPage=5",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts"
					],
					"query": [
						{
							"key": "page",
							"value": "1",
							"equals": true
						},
						{
							"key": "itemsPerPage",
							"value": "5",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "4. /accounts - filter - unfiltered list of accounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Unfiltered list of accounts\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.totalItems).to.eql(20);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/hal+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}/accounts",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "5. /accounts - filter - filtered list of accounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Filtered list of accounts\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.totalItems).to.eql(10);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/hal+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}/accounts?isActive=false",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts"
					],
					"query": [
						{
							"key": "isActive",
							"value": "false",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "6. /roles - filter - by subresource property",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Only active users roles\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.totalItems).to.eql(2); // all users (only one for now) with ROLE_ADMIN are not active, so this role will not appear in the collection ",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/hal+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}/roles?accounts.isActive=true",
					"host": [
						"{{url}}"
					],
					"path": [
						"roles"
					],
					"query": [
						{
							"key": "accounts.isActive",
							"value": "true",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "7. /roles - filter - by subresource property - application/json header",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Only active users roles\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    var roleSymbols = [];",
							"    jsonData.forEach(function(elem){ ",
							"        roleSymbols.push(elem.symbol);",
							"    })",
							"    pm.expect(roleSymbols.length).to.eql(2);",
							"    pm.expect(roleSymbols.includes('ROLE_SUPER_ADMIN')).to.be.true;",
							"    pm.expect(roleSymbols.includes('ROLE_USER')).to.be.true;",
							"    pm.expect(roleSymbols.includes('ROLE_ADMIN')).to.be.false;",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}/roles?accounts.isActive=true",
					"host": [
						"{{url}}"
					],
					"path": [
						"roles"
					],
					"query": [
						{
							"key": "accounts.isActive",
							"value": "true",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "8. /accounts - serialization|deserialization - post error",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Error when empty username\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.eql('password: Please provide password');",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{$guid}}\",\n  \"isActive\": true,\n  \"password\": \"\"\n}"
				},
				"url": {
					"raw": "{{url}}/accounts",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "9. /accounts - serialization|deserialization - post success",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Account created successfully and we do not have password property in response object\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('username');",
							"    pm.expect(jsonData).to.have.property('isActive');",
							"    pm.expect(jsonData).to.have.property('roles');",
							"    pm.expect(jsonData).to.not.have.property('password');",
							"    ",
							"    postman.setEnvironmentVariable(\"account_id\", jsonData.id);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{$guid}}\",\n  \"isActive\": true,\n  \"password\": \"asdf1234\"\n}"
				},
				"url": {
					"raw": "{{url}}/accounts",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "10. /accounts - serialization|deserialization - put update",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Update created account in previous step\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isActive).to.be.equal(false);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"isActive\": false\n}"
				},
				"url": {
					"raw": "{{url}}/accounts/{{account_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts",
						"{{account_id}}"
					]
				},
				"description": ""
			},
			"response": []
		}
	]
}